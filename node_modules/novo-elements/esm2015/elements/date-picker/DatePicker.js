// NG2
import { ElementRef, Component, EventEmitter, forwardRef, Input, Output, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { animate, state, style, transition, trigger } from '@angular/animations';
// Vendor
import * as dateFns from 'date-fns';
// APP
import { Helpers } from '../../utils/Helpers';
import { NovoLabelService } from '../../services/novo-label-service';
// Value accessor for the component (supports ngModel)
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/novo-label-service';
import * as ɵngcc2 from '@angular/common';

function NovoDatePickerElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelementStart(1, "h4", 18);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "h2", 19);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "h1", 20);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "h3", 21);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", ctx_r0.heading == null ? null : ctx_r0.heading.day);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.heading == null ? null : ctx_r0.heading.day);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", ctx_r0.heading == null ? null : ctx_r0.heading.month);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.heading == null ? null : ctx_r0.heading.month);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", ctx_r0.heading == null ? null : ctx_r0.heading.date);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.heading == null ? null : ctx_r0.heading.date);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", ctx_r0.heading == null ? null : ctx_r0.heading.year);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.heading == null ? null : ctx_r0.heading.year);
} }
function NovoDatePickerElement_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelementStart(1, "span", 23);
    ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_div_2_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.toggleRangeSelect("startDate"); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 24);
    ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_div_2_Template_span_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.toggleRangeSelect("endDate"); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "i", 25);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("week-select-mode", ctx_r1.weekRangeSelect);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("@startDateTextState", ctx_r1.rangeSelectMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.selectedLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("@endDateTextState", ctx_r1.rangeSelectMode);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.selected2Label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("@indicatorState", ctx_r1.rangeSelectMode);
} }
function NovoDatePickerElement_th_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r9 = ctx.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("title", day_r9);
    ɵngcc0.ɵɵattribute("data-automation-id", day_r9.substr(0, 2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(day_r9.substr(0, 2));
} }
const _c0 = function (a0, a1, a2, a3, a4, a5, a6) { return { today: a0, "notinmonth": a1, selected: a2, filler: a3, startfill: a4, endfill: a5, "selecting-range": a6 }; };
function NovoDatePickerElement_tr_16_td_1_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 28);
    ɵngcc0.ɵɵlistener("mouseover", function NovoDatePickerElement_tr_16_td_1_Template_td_mouseover_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const day_r12 = ctx.$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.rangeHover($event, day_r12); });
    ɵngcc0.ɵɵelementStart(1, "button", 29);
    ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_tr_16_td_1_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const day_r12 = ctx.$implicit; const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.select($event, day_r12, true); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const day_r12 = ctx.$implicit;
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction7(5, _c0, day_r12.isToday, day_r12.date.getMonth() !== ctx_r11.month.getMonth(), ctx_r11.isSelected(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2), ctx_r11.isFiller(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2), ctx_r11.isStartFill(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2), ctx_r11.isEndFill(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2), ctx_r11.isSelectingRange(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2, ctx_r11.hoverDay, ctx_r11.rangeSelectMode, ctx_r11.weekRangeSelect)));
    ɵngcc0.ɵɵattribute("data-automation-id", day_r12.number);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r11.isDisabled(day_r12.date, ctx_r11.start, ctx_r11.end));
    ɵngcc0.ɵɵattribute("data-automation-id", day_r12.number);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(day_r12.number);
} }
function NovoDatePickerElement_tr_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵtemplate(1, NovoDatePickerElement_tr_16_td_1_Template, 3, 13, "td", 27);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const week_r10 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", week_r10.days);
} }
const _c1 = function (a0) { return { selected: a0 }; };
function NovoDatePickerElement_div_18_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_div_18_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const i_r17 = ctx.index; const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.setMonth(i_r17); });
    ɵngcc0.ɵɵelementStart(1, "div", 31);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const month_r16 = ctx.$implicit;
    const i_r17 = ctx.index;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c1, i_r17 === (ctx_r4.selected == null ? null : ctx_r4.selected.getMonth())));
    ɵngcc0.ɵɵattribute("data-automation-id", month_r16);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(month_r16);
} }
function NovoDatePickerElement_div_20_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_div_20_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const year_r20 = ctx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.setYear(year_r20); });
    ɵngcc0.ɵɵelementStart(1, "div", 32);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const year_r20 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c1, year_r20 == (ctx_r5.selected == null ? null : ctx_r5.selected.getFullYear())));
    ɵngcc0.ɵɵattribute("data-automation-id", year_r20);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(year_r20);
} }
const DATE_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDatePickerElement),
    multi: true,
};
export class NovoDatePickerElement {
    constructor(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        // List of all the weekdays
        this.weekdays = [];
        // List of all months
        this.months = [];
        // List of all years (generated in ngOnInit)
        this.years = [];
        // Default view mode (select days)
        this.view = 'days';
        this.rangeSelectMode = 'startDate';
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    ngOnInit() {
        // Determine the year array
        const now = new Date();
        const start = this.minYear ? Number(this.minYear) : now.getFullYear() - 100;
        const end = this.maxYear ? Number(this.maxYear) : now.getFullYear() + 10;
        for (let i = start; i <= end; i++) {
            this.years.push(i);
        }
        // Set weekdays / months
        this.weekdays = this.setupWeekdays();
        this.months = this.labels.getMonths();
        // Set labels
        this.selectedLabel = this.labels.startDate;
        this.selected2Label = this.labels.endDate;
        this.updateView(this.model, false, true);
    }
    ngOnChanges(changes) {
        const weekRangeSelectChange = changes['weekRangeSelect'];
        if (weekRangeSelectChange &&
            weekRangeSelectChange.currentValue !== weekRangeSelectChange.previousValue &&
            !weekRangeSelectChange.firstChange) {
            this.clearRange();
        }
        const weekStartChanges = changes['weekStart'];
        if (weekStartChanges && weekStartChanges.currentValue !== weekStartChanges.previousValue && !weekStartChanges.firstChange) {
            this.weekdays = this.setupWeekdays();
            this.updateView(this.model, false, false);
        }
    }
    setupWeekdays() {
        let weekdays = this.labels.getWeekdays();
        // Weekstart must be 0-6 (Sunday - Saturday)
        if (!Helpers.isBlank(this.weekStart) && this.weekStart > 0 && this.weekStart <= 6) {
            const newStart = weekdays.splice(this.weekStart);
            weekdays = [...newStart, ...weekdays];
        }
        return weekdays;
    }
    isSelectingRange(range, day, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect) {
        if (range && !weekRangeSelect) {
            const isRangeModeEndDate = rangeSelectMode === 'endDate' && (selected && selected2 && dateFns.isAfter(day, selected2) && dateFns.isBefore(day, hoverDay));
            const isRangeModeStartDate = rangeSelectMode === 'startDate' && (selected && selected2 && dateFns.isBefore(day, selected) && dateFns.isAfter(day, hoverDay));
            const isNotSelected = !selected && selected2 && dateFns.isBefore(day, selected2) && dateFns.isAfter(day, hoverDay);
            const isNotSelected2 = selected && !selected2 && dateFns.isAfter(day, selected) && dateFns.isBefore(day, hoverDay);
            return isNotSelected2 || isNotSelected || isRangeModeStartDate || isRangeModeEndDate;
        }
        return false;
    }
    isEndFill(range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !dateFns.isSameDay(selected, selected2) && dateFns.isSameDay(day, selected2) && dateFns.isAfter(day, selected);
        }
        return false;
    }
    isStartFill(range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !dateFns.isSameDay(selected, selected2) && dateFns.isSameDay(day, selected) && dateFns.isBefore(day, selected2);
        }
        return false;
    }
    isFiller(range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return ((dateFns.isAfter(day, selected) && dateFns.isBefore(day, selected2)) ||
                dateFns.isSameDay(day, selected) ||
                dateFns.isSameDay(day, selected2));
        }
        return false;
    }
    isSelected(range, day, selected, selected2) {
        if (range) {
            return (day &&
                ((selected &&
                    (day.getDate() === selected.getDate() &&
                        day.getMonth() === selected.getMonth() &&
                        day.getFullYear() === selected.getFullYear())) ||
                    (selected2 &&
                        (day.getDate() === selected2.getDate() &&
                            day.getMonth() === selected2.getMonth() &&
                            day.getFullYear() === selected2.getFullYear()))));
        }
        return day.getDate() === selected.getDate() && day.getMonth() === selected.getMonth() && day.getFullYear() === selected.getFullYear();
    }
    isDisabled(day, start, end) {
        return dateFns.isBefore(day, start) || dateFns.isAfter(day, end);
    }
    updateView(date, fireEvents, markedSelected) {
        if (date && date.startDate === null) {
            this.clearRange();
        }
        else {
            if (!date) {
                this.clearRange();
            }
            let value = date ? new Date(date) : new Date();
            value = this.removeTime(value);
            this.month = new Date(value);
            this.monthLabel = this.labels.formatDateWithFormat(this.month, { month: 'short' });
            const start = new Date(value.getTime());
            start.setDate(1);
            this.removeTime(start.setDate(1));
            this.buildMonth(start, this.month);
            if (markedSelected) {
                this.select(null, { date: value }, fireEvents);
            }
        }
    }
    setToday() {
        const tmp = new Date();
        this.updateView(tmp, true, true);
        // Go back to days
        this.open(null, 'days');
    }
    clearRange() {
        this.selected = null;
        this.selectedLabel = this.labels.startDate;
        this.selected2 = null;
        this.selected2Label = this.labels.endDate;
    }
    setMonth(month) {
        const date = this.month ? this.month : new Date();
        const tmp = dateFns.setMonth(date, month);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    }
    setYear(year) {
        const date = this.month ? this.month : new Date();
        const tmp = dateFns.setYear(date, year);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    }
    select(event, day, fireEvents) {
        Helpers.swallowEvent(event);
        if (this.range) {
            if (this.weekRangeSelect) {
                this.selected = dateFns.startOfWeek(day.date, { weekStartsOn: this.weekStart });
                this.selected2 = dateFns.endOfWeek(day.date, { weekStartsOn: this.weekStart });
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                // Make sure to fire this, since we default to the current week selected!
                if (!fireEvents && this.weekRangeSelect) {
                    this.fireRangeSelect();
                }
            }
            else if (this.rangeSelectMode === 'startDate') {
                // SET START DATE
                this.selected = dateFns.startOfDay(day.date);
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                if (this.selected2 && dateFns.isAfter(day.date, this.selected2)) {
                    // CLEAR END DATE
                    this.selected2 = null;
                    this.selected2Label = this.labels.endDate;
                }
                if (event) {
                    this.rangeSelectMode = 'endDate';
                }
            }
            else if (this.rangeSelectMode === 'endDate') {
                // SET END DATE
                this.selected2 = dateFns.endOfDay(day.date);
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                if (this.selected && dateFns.isBefore(day.date, this.selected)) {
                    // CLEAR START DATE
                    this.selected = null;
                    this.selectedLabel = this.labels.startDate;
                }
                if (event) {
                    this.rangeSelectMode = 'startDate';
                }
            }
        }
        else {
            this.selected = day.date;
            this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                month: 'short',
                day: '2-digit',
                year: 'numeric',
            });
            this.updateHeading();
        }
        if (fireEvents && this.selected) {
            // Emit our output
            if (this.range && this.selected && this.selected2) {
                this.fireRangeSelect();
                // Also, update the ngModel
                this._onChange({
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null,
                });
                this.model = {
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null,
                };
            }
            if (!this.range) {
                this.onSelect.next({
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected,
                });
                // Also, update the ngModel
                this._onChange(this.selected);
                this.model = this.selected;
            }
        }
    }
    fireRangeSelect() {
        // Make sure the start date is before the end date
        if (dateFns.isBefore(this.selected, this.selected2)) {
            this.onSelect.next({
                startDate: {
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected,
                },
                endDate: {
                    month: this.labels.formatDateWithFormat(this.selected2, { month: 'long' }),
                    year: this.selected2.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected2, { weekday: 'long' }),
                    date: this.selected2,
                },
            });
        }
    }
    open(event, type) {
        Helpers.swallowEvent(event);
        // If they click the toggle two time in a row, close it (go back to days)
        if (type === this.view) {
            this.view = 'days';
        }
        else {
            this.view = type;
        }
        // Make sure to scroll the selected one into view
        if (this.view === 'years' || this.view === 'months') {
            setTimeout(() => {
                const container = this.element.nativeElement.querySelector(`.calendar-content.${this.view}`);
                const selectedItem = this.element.nativeElement.querySelector(`.calendar-content.${this.view} .${this.view === 'years' ? 'year' : 'month'}.selected`);
                if (container && selectedItem) {
                    container.scrollTop = selectedItem.offsetTop - 100;
                }
            });
        }
        this.updateHeading();
    }
    prevMonth(event) {
        Helpers.swallowEvent(event);
        const tmp = dateFns.subMonths(this.month, 1);
        this.updateView(tmp, false, false);
    }
    nextMonth(event) {
        Helpers.swallowEvent(event);
        const tmp = dateFns.addMonths(this.month, 1);
        this.updateView(tmp, false, false);
    }
    updateHeading() {
        if (!this.selected) {
            return;
        }
        this.heading = {
            month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
            year: this.selected.getFullYear(),
            day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
            date: this.selected.getDate(),
        };
    }
    /**
     * Remove the time aspect of the date
     * @returns with time stripped out
     */
    removeTime(date) {
        const ret = new Date(date);
        ret.setHours(12);
        ret.setSeconds(0);
        ret.setMilliseconds(0);
        return ret;
    }
    buildMonth(start, month) {
        // Reset the weeks
        this.weeks = [];
        // House keeping variables to know when we are done building the month
        let done = false;
        let date = dateFns.startOfWeek(start, { weekStartsOn: this.weekStart });
        let monthIndex = date.getMonth();
        let count = 0;
        while (!done) {
            // Build the days for the weeks
            this.weeks.push({ days: this.buildWeek(new Date(date.getTime()), month) });
            // Increment variables for the next iteration
            date = dateFns.addDays(date, 7);
            done = count++ > 2 && monthIndex !== date.getMonth();
            monthIndex = date.getMonth();
        }
    }
    buildWeek(date, month) {
        // Build out of the days of the week
        const days = [];
        // Iterate over the days of the week
        for (let i = 0; i < 7; i++) {
            // Push a variable on the day array with lots of helpers to make the template easier
            days.push({
                name: this.weekdays[i],
                number: date.getDate(),
                isToday: dateFns.isToday(date),
                date,
            });
            // Increment for the next iteration
            date = dateFns.addDays(date, 1);
        }
        return days;
    }
    toggleRangeSelect(range) {
        this.rangeSelectMode = range;
    }
    rangeHover(event, day) {
        this.hoverDay = day.date;
    }
    // ValueAccessor Functions
    writeValue(model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.updateView(model, false, true);
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
NovoDatePickerElement.ɵfac = function NovoDatePickerElement_Factory(t) { return new (t || NovoDatePickerElement)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NovoLabelService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NovoDatePickerElement.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NovoDatePickerElement, selectors: [["novo-date-picker"]], inputs: { weekStart: "weekStart", minYear: "minYear", maxYear: "maxYear", start: "start", end: "end", inline: "inline", range: "range", weekRangeSelect: "weekRangeSelect" }, outputs: { onSelect: "onSelect" }, features: [ɵngcc0.ɵɵProvidersFeature([DATE_PICKER_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 24, vars: 12, consts: [[1, "calendar"], ["class", "calendar-top", 4, "ngIf"], ["class", "date-range-tabs", 3, "week-select-mode", 4, "ngIf"], [1, "calendar-header"], ["data-automation-id", "calendar-previous", 1, "previous", 3, "click"], [1, "heading"], ["data-automation-id", "header-month", 1, "month", 3, "click"], ["data-automation-id", "header-year", 1, "year", 3, "click"], ["data-automation-id", "calendar-next", 1, "next", 3, "click"], ["cellspacing", "0", "cellpadding", "0", 1, "calendar-content", "days", 3, "hidden"], ["class", "weekday", 3, "title", 4, "ngFor", "ngForOf"], [4, "ngFor", "ngForOf"], [1, "calendar-content", "months", 3, "hidden"], [3, "click", 4, "ngFor", "ngForOf"], [1, "calendar-content", "years", 3, "hidden"], [1, "calendar-footer"], ["data-automation-id", "calendar-today", 1, "today", 3, "click"], [1, "calendar-top"], [1, "day"], [1, "month"], [1, "date"], [1, "year"], [1, "date-range-tabs"], ["data-automation-id", "calendar-start-date", 1, "range-tab", 3, "click"], ["data-automation-id", "calendar-end-date", 1, "range-tab", 3, "click"], [1, "indicator"], [1, "weekday", 3, "title"], [3, "ngClass", "mouseover", 4, "ngFor", "ngForOf"], [3, "ngClass", "mouseover"], [1, "day", 3, "disabled", "click"], [3, "click"], [1, "month", 3, "ngClass"], [1, "year", 3, "ngClass"]], template: function NovoDatePickerElement_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, NovoDatePickerElement_div_1_Template, 9, 8, "div", 1);
        ɵngcc0.ɵɵtemplate(2, NovoDatePickerElement_div_2_Template, 6, 7, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_4_listener($event) { return ctx.prevMonth($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "span", 5);
        ɵngcc0.ɵɵelementStart(6, "span", 6);
        ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_6_listener($event) { return ctx.open($event, "months"); });
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "span", 7);
        ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_8_listener($event) { return ctx.open($event, "years"); });
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "span", 8);
        ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_10_listener($event) { return ctx.nextMonth($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "table", 9);
        ɵngcc0.ɵɵelementStart(12, "thead");
        ɵngcc0.ɵɵelementStart(13, "tr");
        ɵngcc0.ɵɵtemplate(14, NovoDatePickerElement_th_14_Template, 2, 3, "th", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "tbody");
        ɵngcc0.ɵɵtemplate(16, NovoDatePickerElement_tr_16_Template, 2, 1, "tr", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "section", 12);
        ɵngcc0.ɵɵtemplate(18, NovoDatePickerElement_div_18_Template, 3, 5, "div", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "section", 14);
        ɵngcc0.ɵɵtemplate(20, NovoDatePickerElement_div_20_Template, 3, 5, "div", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 15);
        ɵngcc0.ɵɵelementStart(22, "span", 16);
        ɵngcc0.ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_22_listener() { return ctx.setToday(); });
        ɵngcc0.ɵɵtext(23);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.inline && !ctx.range);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.range);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.monthLabel);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.month == null ? null : ctx.month.getFullYear());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hidden", !(ctx.view == "days"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.weekdays);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.weeks);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", ctx.view !== "months");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.months);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", ctx.view !== "years");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.years);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.labels.today);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc2.NgClass], encapsulation: 2, data: { animation: [
            trigger('startDateTextState', [
                state('startDate', style({
                    opacity: '1.0'
                })),
                state('endDate', style({
                    opacity: '0.6'
                })),
                transition('startDate <=> endDate', animate('200ms ease-in')),
            ]),
            trigger('endDateTextState', [
                state('startDate', style({
                    opacity: '0.6'
                })),
                state('endDate', style({
                    opacity: '1.0'
                })),
                transition('startDate <=> endDate', animate('200ms ease-in')),
            ]),
            trigger('indicatorState', [
                state('startDate', style({
                    transform: 'translateX(0%)'
                })),
                state('endDate', style({
                    transform: 'translateX(100%)'
                })),
                transition('startDate <=> endDate', animate('200ms ease-in')),
            ]),
        ] } });
NovoDatePickerElement.ctorParameters = () => [
    { type: NovoLabelService },
    { type: ElementRef }
];
NovoDatePickerElement.propDecorators = {
    minYear: [{ type: Input }],
    maxYear: [{ type: Input }],
    start: [{ type: Input }],
    end: [{ type: Input }],
    inline: [{ type: Input }],
    range: [{ type: Input }],
    weekRangeSelect: [{ type: Input }],
    weekStart: [{ type: Input }],
    onSelect: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NovoDatePickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-picker',
                providers: [DATE_PICKER_VALUE_ACCESSOR],
                animations: [
                    trigger('startDateTextState', [
                        state('startDate', style({
                            opacity: '1.0'
                        })),
                        state('endDate', style({
                            opacity: '0.6'
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                    trigger('endDateTextState', [
                        state('startDate', style({
                            opacity: '0.6'
                        })),
                        state('endDate', style({
                            opacity: '1.0'
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                    trigger('indicatorState', [
                        state('startDate', style({
                            transform: 'translateX(0%)'
                        })),
                        state('endDate', style({
                            transform: 'translateX(100%)'
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                ],
                template: `
        <div class="calendar">
            <div class="calendar-top" *ngIf="!inline && !range">
                <h4 class="day" [attr.data-automation-id]="heading?.day">{{heading?.day}}</h4>
                <h2 class="month" [attr.data-automation-id]="heading?.month">{{heading?.month}}</h2>
                <h1 class="date" [attr.data-automation-id]="heading?.date">{{heading?.date}}</h1>
                <h3 class="year" [attr.data-automation-id]="heading?.year">{{heading?.year}}</h3>
            </div>
            <div class="date-range-tabs" *ngIf="range" [class.week-select-mode]="weekRangeSelect">
                <span class="range-tab" (click)="toggleRangeSelect('startDate')" [@startDateTextState]="rangeSelectMode" data-automation-id="calendar-start-date">{{selectedLabel}}</span>
                <span class="range-tab" (click)="toggleRangeSelect('endDate')" [@endDateTextState]="rangeSelectMode" data-automation-id="calendar-end-date">{{selected2Label}}</span>
                <i class="indicator" [@indicatorState]="rangeSelectMode"></i>
            </div>
            <div class="calendar-header">
                <span class="previous" (click)="prevMonth($event)" data-automation-id="calendar-previous"></span>
                <span class="heading">
                    <span class="month" (click)="open($event, 'months')" data-automation-id="header-month">{{monthLabel}}</span>
                    <span class="year" (click)="open($event, 'years')" data-automation-id="header-year">{{month?.getFullYear()}}</span>
                </span>
                <span class="next" (click)="nextMonth($event)" data-automation-id="calendar-next"></span>
            </div>
            <table class="calendar-content days" cellspacing="0" cellpadding="0" [hidden]="!(view=='days')">
                <thead>
                    <tr>
                        <th *ngFor="let day of weekdays" title="{{day}}" class="weekday" [attr.data-automation-id]="day.substr(0, 2)">{{day.substr(0, 2)}}</th>
                    </tr>
                </thead>
                <tbody>
                    <tr *ngFor="let week of weeks">
                        <td *ngFor="let day of week.days" [ngClass]="{
                            today: day.isToday,
                            'notinmonth': day.date.getMonth() !== this.month.getMonth(),
                            selected: isSelected(range, day.date, selected, selected2),
                            filler: isFiller(range, day.date, selected, selected2),
                            startfill: isStartFill(range, day.date, selected, selected2),
                            endfill: isEndFill(range, day.date, selected, selected2),
                            'selecting-range': isSelectingRange(range, day.date, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect)
                           }" (mouseover)="rangeHover($event, day)" [attr.data-automation-id]="day.number">
                            <button class="day" [attr.data-automation-id]="day.number" [disabled]="isDisabled(day.date, start, end)" (click)="select($event, day, true)">{{day.number}}</button>
                        </td>
                    </tr>
                </tbody>
            </table>
            <section class="calendar-content months" [hidden]="view !== 'months'">
                <div *ngFor="let month of months;let i = index" (click)="setMonth(i)">
                    <div class="month" [ngClass]="{selected: i === selected?.getMonth()}" [attr.data-automation-id]="month">{{month}}</div>
                </div>
            </section>
            <section class="calendar-content years" [hidden]="view !== 'years'">
                <div *ngFor="let year of years" (click)="setYear(year)">
                    <div class="year" [ngClass]="{selected: year == selected?.getFullYear()}" [attr.data-automation-id]="year">{{year}}</div>
                </div>
            </section>
            <div class="calendar-footer">
                <span (click)="setToday()" class="today" data-automation-id="calendar-today">{{ labels.today }}</span>
            </div>
        </div>
    `
            }]
    }], function () { return [{ type: ɵngcc1.NovoLabelService }, { type: ɵngcc0.ElementRef }]; }, { weekStart: [{
            type: Input
        }], onSelect: [{
            type: Output
        }], minYear: [{
            type: Input
        }], maxYear: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], inline: [{
            type: Input
        }], range: [{
            type: Input
        }], weekRangeSelect: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,