// NG2
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostListener, Input, Output, QueryList, ViewChild, } from '@angular/core';
import { Helpers } from '../../utils/Helpers';
import { KeyCodes } from '../../utils/key-codes/KeyCodes';
import { notify } from '../../utils/notifier/notifier.util';
// APP
import { NovoOverlayTemplateComponent } from '../overlay/Overlay';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../overlay/Overlay';

const _c0 = [[["button"]], "*"];
const _c1 = ["button", "*"];
const _c2 = ["*"];
export class NovoDropdownElement {
    constructor(element, ref) {
        this.element = element;
        this.ref = ref;
        this.parentScrollAction = 'close';
        this.side = 'default';
        this.scrollStrategy = 'reposition';
        this.width = -1; // Defaults to dynamic width (no hardcoded width value and no host width lookup)
        this.appendToBody = false; // Deprecated
        this.toggled = new EventEmitter();
        this.activeIndex = -1;
        this.filterTerm = '';
        this.clickHandler = this.togglePanel.bind(this);
        this.closeHandler = this.closePanel.bind(this);
    }
    ngOnInit() {
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        // Add a click handler to the button to toggle the menu
        const button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
        if (this.parentScrollSelector) {
            this.parentScrollElement = Helpers.findAncestor(this.element.nativeElement, this.parentScrollSelector);
        }
    }
    ngOnDestroy() {
        // Remove listener
        const button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
        }
    }
    set items(items) {
        this._items = items;
        this.activeIndex = -1;
        // Get the innerText of all the items to allow for searching
        this._textItems = items.map((item) => {
            return item.element.nativeElement.innerText;
        });
    }
    /** BEGIN: Convenient Panel Methods. */
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    openPanel() {
        this.overlay.openPanel();
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.addEventListener('scroll', this.closeHandler);
        }
        this.toggled.emit(true);
    }
    closePanel() {
        this.overlay.closePanel();
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
        }
        // Clear active index
        if (this.activeIndex !== -1) {
            this._items.toArray()[this.activeIndex].active = false;
        }
        this.activeIndex = -1;
        this.ref.markForCheck();
        this.toggled.emit(false);
    }
    togglePanel() {
        this.panelOpen ? this.closePanel() : this.openPanel();
    }
    /** END: Convenient Panel Methods. */
    onKeyDown(event) {
        if (this.panelOpen && event.keyCode === KeyCodes.ESC) {
            Helpers.swallowEvent(event);
            // active & esc hit -- close
            this.closePanel();
        }
        else if (event.keyCode === KeyCodes.ENTER) {
            Helpers.swallowEvent(event);
            // enter -- perform the "click"
            this._items.toArray()[this.activeIndex].onClick(event);
        }
        else if (event.keyCode === KeyCodes.DOWN) {
            Helpers.swallowEvent(event);
            // down - navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex++;
            if (this.activeIndex === this._items.length) {
                this.activeIndex = 0;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex++;
                if (this.activeIndex === this._items.length) {
                    this.activeIndex = 0;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if (event.keyCode === KeyCodes.UP) {
            Helpers.swallowEvent(event);
            // up -- navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex--;
            if (this.activeIndex < 0) {
                this.activeIndex = this._items.length - 1;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex--;
                if (this.activeIndex < 0) {
                    this.activeIndex = this._items.length - 1;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
            (event.keyCode >= 96 && event.keyCode <= 105) ||
            (event.keyCode >= 48 && event.keyCode <= 57) ||
            event.keyCode === KeyCodes.SPACE) {
            Helpers.swallowEvent(event);
            // A-Z, 0-9, space -- filter the list and scroll to active filter
            // filter has hard reset after 2s
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(() => {
                this.filterTerm = '';
            }, 2000);
            const char = event.key;
            this.filterTerm = this.filterTerm.concat(char);
            const index = this._textItems.findIndex((value) => {
                return new RegExp(`^${this.filterTerm.toLowerCase()}`).test(value.trim().toLowerCase());
            });
            if (index !== -1) {
                if (this.activeIndex !== -1) {
                    this._items.toArray()[this.activeIndex].active = false;
                }
                this.activeIndex = index;
                this._items.toArray()[this.activeIndex].active = true;
                this.scrollToActive();
            }
        }
        else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
            Helpers.swallowEvent(event);
            // backspace, delete -- remove partial filters
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(() => {
                this.filterTerm = '';
            }, 2000);
            this.filterTerm = this.filterTerm.slice(0, -1);
        }
    }
    onOverlayKeyDown(event) {
        if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER) {
            Helpers.swallowEvent(event);
            this.closePanel();
        }
    }
    scrollToActive() {
        const container = this.overlay.overlayRef.overlayElement.querySelector('.dropdown-container');
        const item = this._items.toArray()[this.activeIndex];
        if (container && item) {
            container.scrollTop = item.element.nativeElement.offsetTop;
        }
    }
}
NovoDropdownElement.ɵfac = function NovoDropdownElement_Factory(t) { return new (t || NovoDropdownElement)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NovoDropdownElement.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NovoDropdownElement, selectors: [["novo-dropdown"]], viewQuery: function NovoDropdownElement_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(NovoOverlayTemplateComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostBindings: function NovoDropdownElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function NovoDropdownElement_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } }, inputs: { parentScrollAction: "parentScrollAction", side: "side", scrollStrategy: "scrollStrategy", width: "width", appendToBody: "appendToBody", parentScrollSelector: "parentScrollSelector", containerClass: "containerClass", height: "height" }, outputs: { toggled: "toggled" }, ngContentSelectors: _c1, decls: 4, vars: 11, consts: [[3, "parent", "width", "position", "scrollStrategy"], [3, "keydown"]], template: function NovoDropdownElement_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵprojection(0, 0, ["#trigger", ""]);
        ɵngcc0.ɵɵelementStart(1, "novo-overlay-template", 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵlistener("keydown", function NovoDropdownElement_Template_div_keydown_2_listener($event) { return ctx.onOverlayKeyDown($event); });
        ɵngcc0.ɵɵprojection(3, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("parent", ctx.element)("width", ctx.width)("position", ctx.side)("scrollStrategy", ctx.scrollStrategy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("dropdown-container ", ctx.containerClass, "");
        ɵngcc0.ɵɵstyleProp("height", ctx.height, "px");
        ɵngcc0.ɵɵclassProp("has-height", !!ctx.height);
    } }, directives: [ɵngcc1.NovoOverlayTemplateComponent], encapsulation: 2 });
NovoDropdownElement.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
NovoDropdownElement.propDecorators = {
    parentScrollSelector: [{ type: Input }],
    parentScrollAction: [{ type: Input }],
    containerClass: [{ type: Input }],
    side: [{ type: Input }],
    scrollStrategy: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    appendToBody: [{ type: Input }],
    toggled: [{ type: Output }],
    overlay: [{ type: ViewChild, args: [NovoOverlayTemplateComponent,] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NovoDropdownElement, [{
        type: Component,
        args: [{
                selector: 'novo-dropdown',
                template: `
    <ng-content select="button" #trigger></ng-content>
    <novo-overlay-template [parent]="element" [width]="width" [position]="side" [scrollStrategy]="scrollStrategy">
      <div
        class="dropdown-container {{ containerClass }}"
        [style.height.px]="height"
        [class.has-height]="!!height"
        (keydown)="onOverlayKeyDown($event)"
      >
        <ng-content></ng-content>
      </div>
    </novo-overlay-template>
  `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { parentScrollAction: [{
            type: Input
        }], side: [{
            type: Input
        }], scrollStrategy: [{
            type: Input
        }], width: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], toggled: [{
            type: Output
        }], 
    /** END: Convenient Panel Methods. */
    onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], parentScrollSelector: [{
            type: Input
        }], containerClass: [{
            type: Input
        }], height: [{
            type: Input
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }] }); })();
export class NovoItemElement {
    constructor(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
        this.keepOpen = false;
        this.action = new EventEmitter();
        this.active = false;
    }
    onClick(event) {
        // Poor man's disable
        if (!this.disabled) {
            // Close if keepOpen is false
            if (!this.keepOpen) {
                this.dropdown.closePanel();
            }
            // Emit the action
            this.action.emit({ originalEvent: event });
        }
    }
}
NovoItemElement.ɵfac = function NovoItemElement_Factory(t) { return new (t || NovoItemElement)(ɵngcc0.ɵɵdirectiveInject(NovoDropdownElement), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NovoItemElement.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NovoItemElement, selectors: [["item"]], hostVars: 4, hostBindings: function NovoItemElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NovoItemElement_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("disabled", ctx.disabled)("active", ctx.active);
    } }, inputs: { keepOpen: "keepOpen", disabled: "disabled" }, outputs: { action: "action" }, ngContentSelectors: _c2, decls: 1, vars: 0, template: function NovoItemElement_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
NovoItemElement.ctorParameters = () => [
    { type: NovoDropdownElement },
    { type: ElementRef }
];
NovoItemElement.propDecorators = {
    disabled: [{ type: Input }],
    keepOpen: [{ type: Input }],
    action: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NovoItemElement, [{
        type: Component,
        args: [{
                selector: 'item',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.disabled]': 'disabled',
                    '[class.active]': 'active'
                }
            }]
    }], function () { return [{ type: NovoDropdownElement }, { type: ɵngcc0.ElementRef }]; }, { keepOpen: [{
            type: Input
        }], action: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], disabled: [{
            type: Input
        }] }); })();
export class NovoDropdownListElement {
    constructor(dropdown) {
        this.dropdown = dropdown;
    }
    ngAfterContentInit() {
        this.dropdown.items = this.items;
        this.items.changes.subscribe(() => {
            this.dropdown.items = this.items;
        });
    }
}
NovoDropdownListElement.ɵfac = function NovoDropdownListElement_Factory(t) { return new (t || NovoDropdownListElement)(ɵngcc0.ɵɵdirectiveInject(NovoDropdownElement)); };
NovoDropdownListElement.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NovoDropdownListElement, selectors: [["list"]], contentQueries: function NovoDropdownListElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NovoItemElement, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);
    } }, ngContentSelectors: _c2, decls: 1, vars: 0, template: function NovoDropdownListElement_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
NovoDropdownListElement.ctorParameters = () => [
    { type: NovoDropdownElement }
];
NovoDropdownListElement.propDecorators = {
    items: [{ type: ContentChildren, args: [NovoItemElement,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NovoDropdownListElement, [{
        type: Component,
        args: [{
                selector: 'list',
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: NovoDropdownElement }]; }, { items: [{
            type: ContentChildren,
            args: [NovoItemElement]
        }] }); })();
export class NovoDropDownItemHeaderElement {
}
NovoDropDownItemHeaderElement.ɵfac = function NovoDropDownItemHeaderElement_Factory(t) { return new (t || NovoDropDownItemHeaderElement)(); };
NovoDropDownItemHeaderElement.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NovoDropDownItemHeaderElement, selectors: [["dropdown-item-header"]], ngContentSelectors: _c2, decls: 1, vars: 0, template: function NovoDropDownItemHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NovoDropDownItemHeaderElement, [{
        type: Component,
        args: [{
                selector: 'dropdown-item-header',
                template: '<ng-content></ng-content>'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,