import { Directive, Input } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CdkAccordion } from '@angular/cdk/accordion';
/**
 * Directive for a Material Design Accordion.
 */
import * as ɵngcc0 from '@angular/core';
export class NovoAccordion extends CdkAccordion {
    constructor() {
        super(...arguments);
        this._hideToggle = false;
        /**
         * The display mode used for all expansion panels in the accordion. Currently two display
         * modes exist:
         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
         *     panel at a different elevation from the reset of the accordion.
         *  flat - no spacing is placed around expanded panels, showing all panels at the same
         *     elevation.
         */
        this.displayMode = 'default';
    }
    /** Whether the expansion indicator should be hidden. */
    get hideToggle() {
        return this._hideToggle;
    }
    set hideToggle(show) {
        this._hideToggle = coerceBooleanProperty(show);
    }
}
NovoAccordion.ɵfac = function NovoAccordion_Factory(t) { return ɵNovoAccordion_BaseFactory(t || NovoAccordion); };
NovoAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NovoAccordion, selectors: [["novo-accordion"]], hostAttrs: [1, "novo-accordion"], inputs: { displayMode: "displayMode", hideToggle: "hideToggle" }, exportAs: ["novoAccordion"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
NovoAccordion.propDecorators = {
    hideToggle: [{ type: Input }],
    displayMode: [{ type: Input }]
};
const ɵNovoAccordion_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(NovoAccordion);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NovoAccordion, [{
        type: Directive,
        args: [{
                selector: 'novo-accordion',
                exportAs: 'novoAccordion',
                host: {
                    class: 'novo-accordion'
                }
            }]
    }], null, { displayMode: [{
            type: Input
        }], hideToggle: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9ydW5uZXIvd29yay9ub3ZvLWVsZW1lbnRzL25vdm8tZWxlbWVudHMvcHJvamVjdHMvbm92by1lbGVtZW50cy9zcmMvZWxlbWVudHMvZXhwYW5zaW9uL2FjY29yZGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLdEQ7QUFDQTtBQUNBLEdBQUc7O0FBUUgsTUFBTSxPQUFPLGFBQWMsU0FBUSxZQUFZO0FBQy9DLElBUkE7QUFDRztBQUNELFFBY1EsZ0JBQVcsR0FBWSxLQUFLLENBQUM7QUFDdkMsUUFDRTtBQUNGO0FBQ007QUFDTTtBQUNNO0FBQ007QUFHcEI7QUFDZSxXQUZkO0FBQ0wsUUFDRSxnQkFBVyxHQUE2QixTQUFTLENBQUM7QUFDcEQsSUFBQSxDQUFDO0FBQ0QsSUFyQkUsd0RBQXdEO0FBQzFELElBQUUsSUFDSSxVQUFVO0FBQUssUUFDakIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLElBQUUsQ0FBQztBQUNILElBQUUsSUFBSSxVQUFVLENBQUMsSUFBYTtBQUM5QixRQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkQsSUFBRSxDQUFDO0FBQ0g7eUNBaEJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO01BQzFCLFFBQVEsRUFBRSxlQUFlLGtCQUN6QixJQUFJLEVBQUUsc0JBQ0osS0FBSyxFQUFFLGdCQUFnQixtQkFDeEIsZUFDRixrSkFDSTtBQUFDO0FBQWlDLHlCQUVwQyxLQUFLO0FBQ04sMEJBZ0JDLEtBQUs7QUFDUDs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgQ2RrQWNjb3JkaW9uIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2FjY29yZGlvbic7XG5cbi8qKiBOb3ZvQWNjb3JkaW9uJ3MgZGlzcGxheSBtb2Rlcy4gKi9cbmV4cG9ydCB0eXBlIE5vdm9BY2NvcmRpb25EaXNwbGF5TW9kZSA9ICdkZWZhdWx0JyB8ICdmbGF0JztcblxuLyoqXG4gKiBEaXJlY3RpdmUgZm9yIGEgTWF0ZXJpYWwgRGVzaWduIEFjY29yZGlvbi5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnbm92by1hY2NvcmRpb24nLFxuICBleHBvcnRBczogJ25vdm9BY2NvcmRpb24nLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICdub3ZvLWFjY29yZGlvbicsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5vdm9BY2NvcmRpb24gZXh0ZW5kcyBDZGtBY2NvcmRpb24ge1xuICAvKiogV2hldGhlciB0aGUgZXhwYW5zaW9uIGluZGljYXRvciBzaG91bGQgYmUgaGlkZGVuLiAqL1xuICBASW5wdXQoKVxuICBnZXQgaGlkZVRvZ2dsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZVRvZ2dsZTtcbiAgfVxuICBzZXQgaGlkZVRvZ2dsZShzaG93OiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZVRvZ2dsZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eShzaG93KTtcbiAgfVxuICBwcml2YXRlIF9oaWRlVG9nZ2xlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBkaXNwbGF5IG1vZGUgdXNlZCBmb3IgYWxsIGV4cGFuc2lvbiBwYW5lbHMgaW4gdGhlIGFjY29yZGlvbi4gQ3VycmVudGx5IHR3byBkaXNwbGF5XG4gICAqIG1vZGVzIGV4aXN0OlxuICAgKiAgZGVmYXVsdCAtIGEgZ3V0dGVyLWxpa2Ugc3BhY2luZyBpcyBwbGFjZWQgYXJvdW5kIGFueSBleHBhbmRlZCBwYW5lbCwgcGxhY2luZyB0aGUgZXhwYW5kZWRcbiAgICogICAgIHBhbmVsIGF0IGEgZGlmZmVyZW50IGVsZXZhdGlvbiBmcm9tIHRoZSByZXNldCBvZiB0aGUgYWNjb3JkaW9uLlxuICAgKiAgZmxhdCAtIG5vIHNwYWNpbmcgaXMgcGxhY2VkIGFyb3VuZCBleHBhbmRlZCBwYW5lbHMsIHNob3dpbmcgYWxsIHBhbmVscyBhdCB0aGUgc2FtZVxuICAgKiAgICAgZWxldmF0aW9uLlxuICAgKi9cbiAgQElucHV0KClcbiAgZGlzcGxheU1vZGU6IE5vdm9BY2NvcmRpb25EaXNwbGF5TW9kZSA9ICdkZWZhdWx0Jztcbn1cbiJdfQ==