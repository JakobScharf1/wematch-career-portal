import { Pipe } from '@angular/core';
import { NovoLabelService } from '../../services/novo-label-service';
import { Helpers } from '../../utils/Helpers';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/novo-label-service';
export function interpolateCell(value, col) {
    if (col.format) {
        return Helpers.interpolateWithFallback(col.format, value);
    }
    return value;
}
export class DataTableInterpolatePipe {
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return interpolateCell(value, column);
        }
        return '';
    }
}
DataTableInterpolatePipe.ɵfac = function DataTableInterpolatePipe_Factory(t) { return new (t || DataTableInterpolatePipe)(); };
DataTableInterpolatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dataTableInterpolate", type: DataTableInterpolatePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableInterpolatePipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableInterpolate',
                pure: true
            }]
    }], null, null); })();
export class DateTableDateRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDate(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableDateRendererPipe.ɵfac = function DateTableDateRendererPipe_Factory(t) { return new (t || DateTableDateRendererPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NovoLabelService)); };
DateTableDateRendererPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dataTableDateRenderer", type: DateTableDateRendererPipe, pure: true });
DateTableDateRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateTableDateRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableDateRenderer',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.NovoLabelService }]; }, null); })();
export class DateTableDateTimeRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDateShort(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableDateTimeRendererPipe.ɵfac = function DateTableDateTimeRendererPipe_Factory(t) { return new (t || DateTableDateTimeRendererPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NovoLabelService)); };
DateTableDateTimeRendererPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dataTableDateTimeRenderer", type: DateTableDateTimeRendererPipe, pure: true });
DateTableDateTimeRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateTableDateTimeRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableDateTimeRenderer',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.NovoLabelService }]; }, null); })();
export class DateTableTimeRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatTime(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableTimeRendererPipe.ɵfac = function DateTableTimeRendererPipe_Factory(t) { return new (t || DateTableTimeRendererPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NovoLabelService)); };
DateTableTimeRendererPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dataTableTimeRenderer", type: DateTableTimeRendererPipe, pure: true });
DateTableTimeRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateTableTimeRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableTimeRenderer',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.NovoLabelService }]; }, null); })();
export class DateTableNumberRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column, isPercent = false) {
        if (!Helpers.isEmpty(value)) {
            let val = interpolateCell(value, column);
            if (isPercent && Helpers.isNumber(val)) {
                val = `${Number(val) * 100}`;
            }
            return `${this.labels.formatNumber(val)}${isPercent ? '%' : ''}`;
        }
        return '';
    }
}
DateTableNumberRendererPipe.ɵfac = function DateTableNumberRendererPipe_Factory(t) { return new (t || DateTableNumberRendererPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NovoLabelService)); };
DateTableNumberRendererPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dataTableNumberRenderer", type: DateTableNumberRendererPipe, pure: true });
DateTableNumberRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateTableNumberRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableNumberRenderer',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.NovoLabelService }]; }, null); })();
export class DataTableBigDecimalRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            const val = interpolateCell(value, column);
            return this.labels.formatBigDecimal(Number(val), column.configuration);
        }
        return '';
    }
}
DataTableBigDecimalRendererPipe.ɵfac = function DataTableBigDecimalRendererPipe_Factory(t) { return new (t || DataTableBigDecimalRendererPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NovoLabelService)); };
DataTableBigDecimalRendererPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dataTableBigDecimalRenderer", type: DataTableBigDecimalRendererPipe, pure: true });
DataTableBigDecimalRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableBigDecimalRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableBigDecimalRenderer',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.NovoLabelService }]; }, null); })();
export class DateTableCurrencyRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            const val = interpolateCell(value, column);
            return this.labels.formatCurrency(Number(val));
        }
        return '';
    }
}
DateTableCurrencyRendererPipe.ɵfac = function DateTableCurrencyRendererPipe_Factory(t) { return new (t || DateTableCurrencyRendererPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NovoLabelService)); };
DateTableCurrencyRendererPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "dataTableCurrencyRenderer", type: DateTableCurrencyRendererPipe, pure: true });
DateTableCurrencyRendererPipe.ctorParameters = () => [
    { type: NovoLabelService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateTableCurrencyRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableCurrencyRenderer',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.NovoLabelService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,