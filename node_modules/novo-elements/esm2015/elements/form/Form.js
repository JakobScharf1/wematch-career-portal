// NG
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
// App
import { NovoTemplateService } from '../../services/template/NovoTemplateService';
import { Helpers } from '../../utils/Helpers';
import { NovoTemplate } from '../common/novo-template/novo-template.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/template/NovoTemplateService';
import * as ɵngcc2 from './ControlTemplates';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/forms';

function NovoFormElement_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "header");
    ɵngcc0.ɵɵprojection(1, 1);
    ɵngcc0.ɵɵprojection(2, 2);
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = ["*", [["form-title"]], [["form-subtitle"]]];
const _c1 = ["*", "form-title", "form-subtitle"];
export class NovoFormElement {
    constructor(templates) {
        this.templates = templates;
        this.hideHeader = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
    }
    get value() {
        return this.form.getRawValue();
    }
    get isValid() {
        return this.form.valid;
    }
    ngOnInit() {
        this.form.layout = this.layout;
    }
    ngAfterContentInit() {
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach((template) => {
                this.templates.addCustom(template.name, template.template);
            });
        }
    }
    showAllFields() {
        Object.keys(this.form.controls).forEach((key) => {
            this.form.controls[key].hidden = false;
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    }
    showOnlyRequired(hideRequiredWithValue) {
        Object.keys(this.form.controls).forEach((key) => {
            // Hide any non-required fields
            if (!this.form.controls[key].required) {
                this.form.controls[key].hidden = true;
            }
            // Hide required fields that have been successfully filled out
            if (hideRequiredWithValue && !Helpers.isBlank(this.form.value[key])) {
                this.form.controls[key].hidden = true;
            }
            // Don't hide fields with errors
            if (this.form.controls[key].errors) {
                this.form.controls[key].hidden = false;
            }
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    }
    forceValidation() {
        Object.keys(this.form.controls).forEach((key) => {
            const control = this.form.controls[key];
            if (control.required && Helpers.isBlank(this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    }
}
NovoFormElement.ɵfac = function NovoFormElement_Factory(t) { return new (t || NovoFormElement)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NovoTemplateService)); };
NovoFormElement.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NovoFormElement, selectors: [["novo-form"]], contentQueries: function NovoFormElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NovoTemplate, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTemplates = _t);
    } }, inputs: { hideHeader: "hideHeader", form: "form", layout: "layout" }, features: [ɵngcc0.ɵɵProvidersFeature([NovoTemplateService])], ngContentSelectors: _c1, decls: 5, vars: 2, consts: [[1, "novo-form-container"], [4, "ngIf"], [1, "novo-form", 3, "formGroup"]], template: function NovoFormElement_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelement(0, "novo-control-templates");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵtemplate(2, NovoFormElement_header_2_Template, 3, 0, "header", 1);
        ɵngcc0.ɵɵelementStart(3, "form", 2);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hideHeader);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
    } }, directives: [ɵngcc2.NovoControlTemplates, ɵngcc3.NgIf, ɵngcc4.ɵangular_packages_forms_forms_y, ɵngcc4.NgControlStatusGroup, ɵngcc4.FormGroupDirective], encapsulation: 2 });
NovoFormElement.ctorParameters = () => [
    { type: NovoTemplateService }
];
NovoFormElement.propDecorators = {
    form: [{ type: Input }],
    layout: [{ type: Input }],
    hideHeader: [{ type: Input }],
    customTemplates: [{ type: ContentChildren, args: [NovoTemplate,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NovoFormElement, [{
        type: Component,
        args: [{
                selector: 'novo-form',
                template: `
        <novo-control-templates></novo-control-templates>
        <div class="novo-form-container">
            <header *ngIf="!hideHeader">
                <ng-content select="form-title"></ng-content>
                <ng-content select="form-subtitle"></ng-content>
            </header>
            <form class="novo-form" [formGroup]="form">
                <ng-content></ng-content>
            </form>
        </div>
    `,
                providers: [NovoTemplateService]
            }]
    }], function () { return [{ type: ɵngcc1.NovoTemplateService }]; }, { hideHeader: [{
            type: Input
        }], form: [{
            type: Input
        }], layout: [{
            type: Input
        }], customTemplates: [{
            type: ContentChildren,
            args: [NovoTemplate]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,